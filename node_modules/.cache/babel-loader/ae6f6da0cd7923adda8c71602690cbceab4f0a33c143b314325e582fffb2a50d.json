{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nimport { useParams } from 'react-router-dom';\nconst drugsShopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = drugsShopsAdapter.getInitialState();\nexport const drugsShopsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugsShops: builder.query({\n      query: () => `/`,\n      //to use SelectId???\n      transformResponse: (responseData, meta, arg) => {\n        // const drugsToShop = responseData.drugsShops.filter(item => Number(item.shopId == Number(arg)))\n        // return drugsShopsAdapter.setAll(initialState, drugsToShop)\n        return drugsShopsAdapter.setAll(initialState, responseData.drugsShops);\n      },\n      // providesTags: { type: 'DrugsShops', id: \"LIST\" },\n      providesTags: (result, error, arg) => [...result.ids.map(id => ({\n        type: 'DrugsToShops',\n        id\n      }))]\n    })\n  })\n});\nexport const {\n  useGetDrugsShopsQuery\n} = drugsShopsApiSlice;\n\n// returns the query result object\nexport const selectDtSResult = drugsShopsApiSlice.endpoints.getDrugsShops.select();\n\n// Creates memoized selector\nconst selectDtSData = createSelector(selectDtSResult, DtSResult => DtSResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllDtS,\n  selectById: selectDtSById,\n  selectIds: selectDtSIds\n  // Pass in a selector that returns the posts slice of state\n} = drugsShopsAdapter.getSelectors(state => {\n  var _selectDtSData;\n  return (_selectDtSData = selectDtSData(state)) !== null && _selectDtSData !== void 0 ? _selectDtSData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","useParams","drugsShopsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsShopsApiSlice","injectEndpoints","endpoints","builder","getDrugsShops","query","transformResponse","responseData","meta","arg","setAll","drugsShops","providesTags","result","error","ids","map","type","useGetDrugsShopsQuery","selectDtSResult","select","selectDtSData","DtSResult","data","selectAll","selectAllDtS","selectById","selectDtSById","selectIds","selectDtSIds","getSelectors","state","_selectDtSData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsToShopsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\nimport { useParams } from 'react-router-dom'\n\nconst drugsShopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.id.localeCompare(b.id)\n})\n\nconst initialState = drugsShopsAdapter.getInitialState()\n\nexport const drugsShopsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugsShops: builder.query({\n            query: () => `/`, //to use SelectId???\n            transformResponse: (responseData, meta, arg) => {\n                // const drugsToShop = responseData.drugsShops.filter(item => Number(item.shopId == Number(arg)))\n                // return drugsShopsAdapter.setAll(initialState, drugsToShop)\n                return drugsShopsAdapter.setAll(initialState, responseData.drugsShops)\n            },\n            // providesTags: { type: 'DrugsShops', id: \"LIST\" },\n            providesTags: (result, error, arg) => [\n                ...result.ids.map(id => ({ type: 'DrugsToShops', id }))\n            ]\n    }),\n})\n})\nexport const {\n    useGetDrugsShopsQuery\n} = drugsShopsApiSlice\n\n// returns the query result object\nexport const selectDtSResult = drugsShopsApiSlice.endpoints.getDrugsShops.select()\n\n// Creates memoized selector\nconst selectDtSData = createSelector(\n    selectDtSResult,\n    DtSResult => DtSResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllDtS,\n    selectById: selectDtSById,\n    selectIds: selectDtSIds\n    // Pass in a selector that returns the posts slice of state\n} = drugsShopsAdapter.getSelectors(state => selectDtSData(state) ?? initialState)"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,iBAAiB,GAAGH,mBAAmB,CAAC;EAC1CI,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,iBAAiB,CAACO,eAAe,CAAC,CAAC;AAExD,OAAO,MAAMC,kBAAkB,GAAGV,QAAQ,CAACW,eAAe,CAAC;EACpDC,SAAS,EAAEC,OAAO,KAAK;IACtBC,aAAa,EAAED,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,KAAO,GAAE;MAAE;MAClBC,iBAAiB,EAAEA,CAACC,YAAY,EAAEC,IAAI,EAAEC,GAAG,KAAK;QAC5C;QACA;QACA,OAAOjB,iBAAiB,CAACkB,MAAM,CAACZ,YAAY,EAAES,YAAY,CAACI,UAAU,CAAC;MAC1E,CAAC;MACD;MACAC,YAAY,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEL,GAAG,KAAK,CAClC,GAAGI,MAAM,CAACE,GAAG,CAACC,GAAG,CAACpB,EAAE,KAAK;QAAEqB,IAAI,EAAE,cAAc;QAAErB;MAAG,CAAC,CAAC,CAAC;IAEnE,CAAC;EACL,CAAC;AACD,CAAC,CAAC;AACF,OAAO,MAAM;EACTsB;AACJ,CAAC,GAAGlB,kBAAkB;;AAEtB;AACA,OAAO,MAAMmB,eAAe,GAAGnB,kBAAkB,CAACE,SAAS,CAACE,aAAa,CAACgB,MAAM,CAAC,CAAC;;AAElF;AACA,MAAMC,aAAa,GAAGjC,cAAc,CAChC+B,eAAe,EACfG,SAAS,IAAIA,SAAS,CAACC,IAAI,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,YAAY;EACvBC,UAAU,EAAEC,aAAa;EACzBC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGrC,iBAAiB,CAACsC,YAAY,CAACC,KAAK;EAAA,IAAAC,cAAA;EAAA,QAAAA,cAAA,GAAIX,aAAa,CAACU,KAAK,CAAC,cAAAC,cAAA,cAAAA,cAAA,GAAIlC,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}