{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nconst medsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst priceSortedAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = medsAdapter.getInitialState();\nexport const medsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getMeds: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        return medsAdapter.setAll(initialState, responseData.meds);\n      }\n      // providesTags: (result) =>\n      //     result\n      //       ? [\n      //           ...result.ids.map(({ id }) => ({ type: 'Med', id })),\n      //           { type: 'Med', id: 'LIST' },\n      //         ]\n      //       : [{ type: 'Med', id: 'LIST' }],\n    }),\n    getMedsByPrice: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        return priceSortedAdapter.setAll(priceSortedAdapter.getInitialState(), responseData.meds);\n      }\n      // providesTags: (result) =>\n      //     result\n      //       ? [\n      //           ...result.ids.map(({ id }) => ({ type: 'Med', id })),\n      //           { type: 'Med', id: 'LIST' },\n      //         ]\n      //       : [{ type: 'Med', id: 'LIST' }],\n    }),\n    //почитати про transformResponse, createEntityAdapter\n    addFavorite: builder.mutation({\n      query: (id, newFav) => ({\n        url: `/favorite`,\n        method: 'PUT',\n        body: {\n          id,\n          newFav\n        }\n      })\n      // invalidatesTags: (result, error, id) => [\n      //     { type: 'Med', id }\n      // ]\n      //how to make rerender after qty change??\n    })\n  })\n});\nexport const {\n  useGetMedsQuery,\n  useGetMedsByPriceQuery,\n  useAddFavoriteMutation\n} = medsApiSlice;\nexport const selectMedsResult = medsApiSlice.endpoints.getMeds.select();\nconst selectMedsData = createSelector(selectMedsResult, medsResult => medsResult.data);\nexport const {\n  selectAll: selectAllMeds,\n  selectById: selectMedById,\n  selectIds: selectMedIds\n} = medsAdapter.getSelectors(state => {\n  var _selectMedsData;\n  return (_selectMedsData = selectMedsData(state)) !== null && _selectMedsData !== void 0 ? _selectMedsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","medsAdapter","sortComparer","a","b","id","localeCompare","priceSortedAdapter","initialState","getInitialState","medsApiSlice","injectEndpoints","endpoints","builder","getMeds","query","transformResponse","responseData","setAll","meds","getMedsByPrice","addFavorite","mutation","newFav","url","method","body","useGetMedsQuery","useGetMedsByPriceQuery","useAddFavoriteMutation","selectMedsResult","select","selectMedsData","medsResult","data","selectAll","selectAllMeds","selectById","selectMedById","selectIds","selectMedIds","getSelectors","state","_selectMedsData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School RTK Query/medicine_delivery_app/src/features/api/medsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\n\nconst medsAdapter = createEntityAdapter({sortComparer: (a, b) => a.id.localeCompare(b.id)})\nconst priceSortedAdapter = createEntityAdapter({sortComparer: (a, b) => a.id.localeCompare(b.id)})\nconst initialState = medsAdapter.getInitialState()\n\nexport const medsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getMeds: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                return medsAdapter.setAll(initialState, responseData.meds)\n            },\n            // providesTags: (result) =>\n            //     result\n            //       ? [\n            //           ...result.ids.map(({ id }) => ({ type: 'Med', id })),\n            //           { type: 'Med', id: 'LIST' },\n            //         ]\n            //       : [{ type: 'Med', id: 'LIST' }],\n        }),\n        getMedsByPrice: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                return priceSortedAdapter.setAll(priceSortedAdapter.getInitialState(), responseData.meds)\n            },\n            // providesTags: (result) =>\n            //     result\n            //       ? [\n            //           ...result.ids.map(({ id }) => ({ type: 'Med', id })),\n            //           { type: 'Med', id: 'LIST' },\n            //         ]\n            //       : [{ type: 'Med', id: 'LIST' }],\n        }),\n        //почитати про transformResponse, createEntityAdapter\n        addFavorite: builder.mutation({\n            query: (id , newFav) => ({\n                url: `/favorite`,\n                method: 'PUT',\n                body: {id, newFav}\n            }),\n            // invalidatesTags: (result, error, id) => [\n            //     { type: 'Med', id }\n            // ]\n            //how to make rerender after qty change??\n        }),\n\n    })\n})\nexport const {\n    useGetMedsQuery,\n    useGetMedsByPriceQuery,\n    useAddFavoriteMutation\n} = medsApiSlice\n\nexport const selectMedsResult = medsApiSlice.endpoints.getMeds.select()\n\nconst selectMedsData = createSelector(\n    selectMedsResult,\n    medsResult => medsResult.data \n)\n\nexport const {\n    selectAll: selectAllMeds,\n    selectById: selectMedById,\n    selectIds: selectMedIds\n} = medsAdapter.getSelectors(state => selectMedsData(state) ?? initialState)\n\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAE9B,MAAMC,WAAW,GAAGF,mBAAmB,CAAC;EAACG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AAAC,CAAC,CAAC;AAC3F,MAAME,kBAAkB,GAAGR,mBAAmB,CAAC;EAACG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AAAC,CAAC,CAAC;AAClG,MAAMG,YAAY,GAAGP,WAAW,CAACQ,eAAe,CAAC,CAAC;AAElD,OAAO,MAAMC,YAAY,GAAGV,QAAQ,CAACW,eAAe,CAAC;EAC9CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,OAAO,EAAED,OAAO,CAACE,KAAK,CAAC;MACnBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOhB,WAAW,CAACiB,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,IAAI,CAAC;MAC9D;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC,CAAC;IACFC,cAAc,EAAEP,OAAO,CAACE,KAAK,CAAC;MAC1BA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOV,kBAAkB,CAACW,MAAM,CAACX,kBAAkB,CAACE,eAAe,CAAC,CAAC,EAAEQ,YAAY,CAACE,IAAI,CAAC;MAC7F;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ,CAAC,CAAC;IACF;IACAE,WAAW,EAAER,OAAO,CAACS,QAAQ,CAAC;MAC1BP,KAAK,EAAEA,CAACV,EAAE,EAAGkB,MAAM,MAAM;QACrBC,GAAG,EAAG,WAAU;QAChBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UAACrB,EAAE;UAAEkB;QAAM;MACrB,CAAC;MACD;MACA;MACA;MACA;IACJ,CAAC;EAEL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTI,eAAe;EACfC,sBAAsB;EACtBC;AACJ,CAAC,GAAGnB,YAAY;AAEhB,OAAO,MAAMoB,gBAAgB,GAAGpB,YAAY,CAACE,SAAS,CAACE,OAAO,CAACiB,MAAM,CAAC,CAAC;AAEvE,MAAMC,cAAc,GAAGlC,cAAc,CACjCgC,gBAAgB,EAChBG,UAAU,IAAIA,UAAU,CAACC,IAC7B,CAAC;AAED,OAAO,MAAM;EACTC,SAAS,EAAEC,aAAa;EACxBC,UAAU,EAAEC,aAAa;EACzBC,SAAS,EAAEC;AACf,CAAC,GAAGvC,WAAW,CAACwC,YAAY,CAACC,KAAK;EAAA,IAAAC,eAAA;EAAA,QAAAA,eAAA,GAAIX,cAAc,CAACU,KAAK,CAAC,cAAAC,eAAA,cAAAA,eAAA,GAAInC,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}