{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from '../api/api';\n// import { useParams } from 'react-router-dom'\n\nconst shopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = shopsAdapter.getInitialState();\nexport const shopsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getShops: builder.query({\n      query: () => '/',\n      transformResponse: (responseData, meta, arg) => {\n        // const drugsToShop = responseData.drugsShops.filter(item => Number(item.shopId == Number(arg)))\n        // return drugsShopsAdapter.setAll(initialState, drugsToShop)\n        return drugsShopsAdapter.setAll(initialState, responseData.drugsShops);\n      },\n      // providesTags: { type: 'DrugsShops', id: \"LIST\" },\n      providesTags: {\n        type: 'Shop',\n        id: \"LIST\"\n      },\n      transformResponse: responseData => {\n        return shopsAdapter.setAll(initialState, responseData.shops);\n      },\n      providesTags: {\n        type: 'Shop',\n        id: \"LIST\"\n      }\n      // providesTags: (result, error, arg) => [\n      //     {type: 'Shops', id: \"LIST\"},\n      //     ...result.ids.map(({ id }) => ({ type: 'Skills', id }))\n      // ]\n    })\n    // getShopsDetailed: builder.query({\n    //     query: () => '/shops',\n    //     transformResponse: responseData => {\n    //         return shopsAdapter.setAll(initialState, responseData)\n    //     },\n    //     providesTags: { type: 'Shop', id: \"LIST\" },\n    //     // providesTags: (result, error, arg) => [\n    //     //     {type: 'Shops', id: \"LIST\"},\n    //     //     ...result.ids.map(({ id }) => ({ type: 'Skills', id }))\n    //     // ]\n    // }),\n  })\n});\nexport const {\n  useGetShopsQuery\n  // useGetShopsDetailedQuery,\n  // useDeleteSkillMutation\n} = shopsApiSlice;\n\n// returns the query result object\nexport const selectShopsResult = shopsApiSlice.endpoints.getShops.select();\n\n// Creates memoized selector\nconst selectShopsData = createSelector(selectShopsResult, shopsResult => shopsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllShops,\n  selectById: selectShopById,\n  selectIds: selectShopIds\n  // Pass in a selector that returns the posts slice of state\n} = shopsAdapter.getSelectors(state => {\n  var _selectShopsData;\n  return (_selectShopsData = selectShopsData(state)) !== null && _selectShopsData !== void 0 ? _selectShopsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","shopsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","shopsApiSlice","injectEndpoints","endpoints","builder","getShops","query","transformResponse","responseData","meta","arg","drugsShopsAdapter","setAll","drugsShops","providesTags","type","shops","useGetShopsQuery","selectShopsResult","select","selectShopsData","shopsResult","data","selectAll","selectAllShops","selectById","selectShopById","selectIds","selectShopIds","getSelectors","state","_selectShopsData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/shopsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\"\nimport {apiSlice} from '../api/api'\n// import { useParams } from 'react-router-dom'\n\nconst shopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.id.localeCompare(b.id)\n})\n\nconst initialState = shopsAdapter.getInitialState()\n\nexport const shopsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getShops: builder.query({\n            query: () => '/',\n\n            transformResponse: (responseData, meta, arg) => {\n                // const drugsToShop = responseData.drugsShops.filter(item => Number(item.shopId == Number(arg)))\n                // return drugsShopsAdapter.setAll(initialState, drugsToShop)\n                return drugsShopsAdapter.setAll(initialState, responseData.drugsShops)\n            },\n            // providesTags: { type: 'DrugsShops', id: \"LIST\" },\n            providesTags: { type: 'Shop', id: \"LIST\" },\n\n\n            transformResponse: responseData => {\n                return shopsAdapter.setAll(initialState, responseData.shops)\n            },\n            providesTags: { type: 'Shop', id: \"LIST\" },\n            // providesTags: (result, error, arg) => [\n            //     {type: 'Shops', id: \"LIST\"},\n            //     ...result.ids.map(({ id }) => ({ type: 'Skills', id }))\n            // ]\n        }),\n        // getShopsDetailed: builder.query({\n        //     query: () => '/shops',\n        //     transformResponse: responseData => {\n        //         return shopsAdapter.setAll(initialState, responseData)\n        //     },\n        //     providesTags: { type: 'Shop', id: \"LIST\" },\n        //     // providesTags: (result, error, arg) => [\n        //     //     {type: 'Shops', id: \"LIST\"},\n        //     //     ...result.ids.map(({ id }) => ({ type: 'Skills', id }))\n        //     // ]\n        // }),\n        }),\n    })\n\nexport const {\n    useGetShopsQuery,\n    // useGetShopsDetailedQuery,\n    // useDeleteSkillMutation\n} = shopsApiSlice\n\n// returns the query result object\nexport const selectShopsResult = shopsApiSlice.endpoints.getShops.select()\n\n// Creates memoized selector\nconst selectShopsData = createSelector(\n    selectShopsResult,\n    shopsResult => shopsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllShops,\n    selectById: selectShopById,\n    selectIds: selectShopIds\n    // Pass in a selector that returns the posts slice of state\n} = shopsAdapter.getSelectors(state => selectShopsData(state) ?? initialState)\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,YAAY;AACnC;;AAEA,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACrCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,YAAY,CAACO,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGT,QAAQ,CAACU,eAAe,CAAC;EAC/CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAEhBC,iBAAiB,EAAEA,CAACC,YAAY,EAAEC,IAAI,EAAEC,GAAG,KAAK;QAC5C;QACA;QACA,OAAOC,iBAAiB,CAACC,MAAM,CAACb,YAAY,EAAES,YAAY,CAACK,UAAU,CAAC;MAC1E,CAAC;MACD;MACAC,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAElB,EAAE,EAAE;MAAO,CAAC;MAG1CU,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOf,YAAY,CAACmB,MAAM,CAACb,YAAY,EAAES,YAAY,CAACQ,KAAK,CAAC;MAChE,CAAC;MACDF,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAElB,EAAE,EAAE;MAAO;MACzC;MACA;MACA;MACA;IACJ,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACA,CAAC;AACL,CAAC,CAAC;AAEN,OAAO,MAAM;EACToB;EACA;EACA;AACJ,CAAC,GAAGhB,aAAa;;AAEjB;AACA,OAAO,MAAMiB,iBAAiB,GAAGjB,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACc,MAAM,CAAC,CAAC;;AAE1E;AACA,MAAMC,eAAe,GAAG9B,cAAc,CAClC4B,iBAAiB,EACjBG,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGnC,YAAY,CAACoC,YAAY,CAACC,KAAK;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAIX,eAAe,CAACU,KAAK,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAIhC,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}