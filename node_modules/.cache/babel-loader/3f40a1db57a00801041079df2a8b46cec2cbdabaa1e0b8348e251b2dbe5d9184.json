{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nimport { useParams } from 'react-router-dom';\nconst drugsShopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.id.localeCompare(a.id)\n});\nconst initialState = drugsShopsAdapter.getInitialState();\nexport const drugsShopsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugsShops: builder.query({\n      query: () => `/`,\n      //to use SelectId???\n      transformResponse: (responseData, meta, arg) => {\n        const allDrugsShops = responseData.drugsShops;\n        const drugsToShop = allDrugsShops.map(id => {\n          console.log(allDrugsShops[Number(id)]);\n          // if(allDrugsShops[drugId].shopId == arg) {\n          //  return allDrugsShops.shopId;\n          // } else {\n          //  return null;\n          // }\n          //  return drugId\n        });\n        console.log(responseData.drugsShops);\n        console.log(Number(arg));\n        return drugsShopsAdapter.setAll(initialState, allDrugsShops);\n      },\n      providesTags: {\n        type: 'DrugsShops',\n        id: \"LIST\"\n      }\n      // providesTags: (result, error, arg) => [\n      //     ...result.ids.map(id => ({ type: 'DrugsToShops', id }))\n      // ]\n    })\n  })\n});\nexport const {\n  useGetDrugsShopsQuery\n} = drugsShopsApiSlice;\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","useParams","drugsShopsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsShopsApiSlice","injectEndpoints","endpoints","builder","getDrugsShops","query","transformResponse","responseData","meta","arg","allDrugsShops","drugsShops","drugsToShop","map","console","log","Number","setAll","providesTags","type","useGetDrugsShopsQuery"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsToShopsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\nimport { useParams } from 'react-router-dom'\n\nconst drugsShopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.id.localeCompare(a.id)\n})\n\nconst initialState = drugsShopsAdapter.getInitialState()\n\nexport const drugsShopsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugsShops: builder.query({\n            query: () => `/`, //to use SelectId???\n            transformResponse: (responseData, meta, arg) => {\n\n                const allDrugsShops=responseData.drugsShops\n\n                const drugsToShop = allDrugsShops.map(id => {\n                    console.log(allDrugsShops[Number(id)]);\n                    // if(allDrugsShops[drugId].shopId == arg) {\n                    //  return allDrugsShops.shopId;\n                    // } else {\n                    //  return null;\n                    // }\n                //  return drugId\n                 });\n                console.log(responseData.drugsShops);\n                console.log(Number(arg));\n                return drugsShopsAdapter.setAll(initialState, allDrugsShops)\n            },\n            providesTags: { type: 'DrugsShops', id: \"LIST\" },\n            // providesTags: (result, error, arg) => [\n            //     ...result.ids.map(id => ({ type: 'DrugsToShops', id }))\n            // ]\n    }),\n})\n})\nexport const {\n    useGetDrugsShopsQuery\n} = drugsShopsApiSlice\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,iBAAiB,GAAGH,mBAAmB,CAAC;EAC1CI,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,EAAE,CAACC,aAAa,CAACH,CAAC,CAACE,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,iBAAiB,CAACO,eAAe,CAAC,CAAC;AAExD,OAAO,MAAMC,kBAAkB,GAAGV,QAAQ,CAACW,eAAe,CAAC;EACpDC,SAAS,EAAEC,OAAO,KAAK;IACtBC,aAAa,EAAED,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,KAAO,GAAE;MAAE;MAClBC,iBAAiB,EAAEA,CAACC,YAAY,EAAEC,IAAI,EAAEC,GAAG,KAAK;QAE5C,MAAMC,aAAa,GAACH,YAAY,CAACI,UAAU;QAE3C,MAAMC,WAAW,GAAGF,aAAa,CAACG,GAAG,CAACjB,EAAE,IAAI;UACxCkB,OAAO,CAACC,GAAG,CAACL,aAAa,CAACM,MAAM,CAACpB,EAAE,CAAC,CAAC,CAAC;UACtC;UACA;UACA;UACA;UACA;UACJ;QACC,CAAC,CAAC;QACHkB,OAAO,CAACC,GAAG,CAACR,YAAY,CAACI,UAAU,CAAC;QACpCG,OAAO,CAACC,GAAG,CAACC,MAAM,CAACP,GAAG,CAAC,CAAC;QACxB,OAAOjB,iBAAiB,CAACyB,MAAM,CAACnB,YAAY,EAAEY,aAAa,CAAC;MAChE,CAAC;MACDQ,YAAY,EAAE;QAAEC,IAAI,EAAE,YAAY;QAAEvB,EAAE,EAAE;MAAO;MAC/C;MACA;MACA;IACR,CAAC;EACL,CAAC;AACD,CAAC,CAAC;AACF,OAAO,MAAM;EACTwB;AACJ,CAAC,GAAGpB,kBAAkB;;AAEtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}