{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nimport { quartersInYear } from \"date-fns/constants\";\nconst cartAdapter = createEntityAdapter();\nconst initialState = cartAdapter.getInitialState();\nexport const cartApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getCart: builder.query({\n      query: () => '/cart',\n      transformResponse: responseData => {\n        return cartAdapter.setAll(initialState, responseData.cart);\n      },\n      providesTags: {\n        type: 'Cart',\n        id: \"LIST\"\n      }\n      // providesTags: (result, error, arg) => [\n      //     {type: 'Cart', id: \"LIST\"},\n      //     ...result.ids.map(({ id }) => ({ type: 'Cart', id }))\n      // ]\n    }),\n    addToCart: builder.mutation({\n      query: itemToAdd => ({\n        url: '/cart',\n        method: 'POST',\n        body: itemToAdd\n      }),\n      invalidatesTags: [{\n        type: 'Cart',\n        id: \"LIST\"\n      }]\n    }),\n    increaseQty: builder.mutation({\n      query: initialItem => ({\n        url: `/cart`,\n        method: 'PUT',\n        body: {\n          ...initialItem,\n          quantity: Number(initialItem.quantity) + 1\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Cart',\n        id: arg.id\n      }]\n    }),\n    decreaseQty: builder.mutation({\n      query: initialItem => ({\n        url: `/cart`,\n        method: 'PUT',\n        body: {\n          ...initialItem,\n          quantity: Number(initialItem.quantity) - 1\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Cart',\n        id: arg.id\n      }]\n    }),\n    deleteFromCart: builder.mutation({\n      query: ({\n        id\n      }) => ({\n        url: `/cart`,\n        method: 'DELETE',\n        body: {\n          id\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Cart',\n        id: arg.id\n      }]\n    }),\n    addCustomer: builder.mutation({\n      query: customerData => ({\n        url: '/customer',\n        method: 'POST',\n        body: customerData\n      })\n      // invalidatesTags: [\n      //     { type: 'Customer', id: \"LIST\" }\n      // ]\n    })\n  })\n});\nexport const {\n  useGetCartQuery,\n  useAddToCartMutation,\n  useDeleteFromCartMutation,\n  useIncreaseQtyMutation,\n  useDecreaseQtyMutation,\n  useAddCustomerMutation\n} = cartApiSlice;\n\n// returns the query result object\nexport const selectCartResult = extendedApiSlice.endpoints.getPosts.select();\n\n// Creates memoized selector\nconst selectPostsData = createSelector(selectPostsResult, postsResult => postsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllPosts,\n  selectById: selectPostById,\n  selectIds: selectPostIds\n  // Pass in a selector that returns the posts slice of state\n} = postsAdapter.getSelectors(state => {\n  var _selectPostsData;\n  return (_selectPostsData = selectPostsData(state)) !== null && _selectPostsData !== void 0 ? _selectPostsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","quartersInYear","cartAdapter","initialState","getInitialState","cartApiSlice","injectEndpoints","endpoints","builder","getCart","query","transformResponse","responseData","setAll","cart","providesTags","type","id","addToCart","mutation","itemToAdd","url","method","body","invalidatesTags","increaseQty","initialItem","quantity","Number","result","error","arg","decreaseQty","deleteFromCart","addCustomer","customerData","useGetCartQuery","useAddToCartMutation","useDeleteFromCartMutation","useIncreaseQtyMutation","useDecreaseQtyMutation","useAddCustomerMutation","selectCartResult","extendedApiSlice","getPosts","select","selectPostsData","selectPostsResult","postsResult","data","selectAll","selectAllPosts","selectById","selectPostById","selectIds","selectPostIds","postsAdapter","getSelectors","state","_selectPostsData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/cartSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\nimport { quartersInYear } from \"date-fns/constants\";\n\nconst cartAdapter = createEntityAdapter()\n\nconst initialState = cartAdapter.getInitialState()\n\nexport const cartApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getCart: builder.query({\n            query: () => '/cart',\n            transformResponse: responseData => {\n                return cartAdapter.setAll(initialState, responseData.cart)\n            },\n            providesTags: { type: 'Cart', id: \"LIST\" },\n            // providesTags: (result, error, arg) => [\n            //     {type: 'Cart', id: \"LIST\"},\n            //     ...result.ids.map(({ id }) => ({ type: 'Cart', id }))\n            // ]\n        }),\n        addToCart: builder.mutation({\n            query: itemToAdd => ({\n                url: '/cart',\n                method: 'POST',\n                body: itemToAdd\n            }),\n            invalidatesTags: [\n                { type: 'Cart', id: \"LIST\" }\n            ]\n        }),\n        increaseQty: builder.mutation({\n            query: initialItem => ({\n                url: `/cart`,\n                method: 'PUT',\n                body: {\n                    ...initialItem,\n                    quantity: Number(initialItem.quantity) + 1\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Cart', id: arg.id }\n            ]\n        }),\n        decreaseQty: builder.mutation({\n            query: initialItem => ({\n                url: `/cart`,\n                method: 'PUT',\n                body: {\n                    ...initialItem,\n                    quantity: Number(initialItem.quantity) - 1\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Cart', id: arg.id }\n            ]\n        }),\n        deleteFromCart: builder.mutation({\n            query: ({ id }) => ({\n                url: `/cart`,\n                method: 'DELETE',\n                body: { id }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Cart', id: arg.id }\n            ]\n        }),\n        addCustomer: builder.mutation({\n            query: customerData => ({\n                url: '/customer',\n                method: 'POST',\n                body: customerData\n            }),\n            // invalidatesTags: [\n            //     { type: 'Customer', id: \"LIST\" }\n            // ]\n        }),\n    })\n})\nexport const {\n    useGetCartQuery,\n    useAddToCartMutation,\n    useDeleteFromCartMutation,\n    useIncreaseQtyMutation,\n    useDecreaseQtyMutation, \n    useAddCustomerMutation\n} = cartApiSlice\n\n// returns the query result object\nexport const selectCartResult = extendedApiSlice.endpoints.getPosts.select()\n\n// Creates memoized selector\nconst selectPostsData = createSelector(\n    selectPostsResult,\n    postsResult => postsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllPosts,\n    selectById: selectPostById,\n    selectIds: selectPostIds\n    // Pass in a selector that returns the posts slice of state\n} = postsAdapter.getSelectors(state => selectPostsData(state) ?? initialState)"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,cAAc,QAAQ,oBAAoB;AAEnD,MAAMC,WAAW,GAAGH,mBAAmB,CAAC,CAAC;AAEzC,MAAMI,YAAY,GAAGD,WAAW,CAACE,eAAe,CAAC,CAAC;AAElD,OAAO,MAAMC,YAAY,GAAGL,QAAQ,CAACM,eAAe,CAAC;EAC9CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,OAAO,EAAED,OAAO,CAACE,KAAK,CAAC;MACnBA,KAAK,EAAEA,CAAA,KAAM,OAAO;MACpBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOV,WAAW,CAACW,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,IAAI,CAAC;MAC9D,CAAC;MACDC,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAE;MAAO;MACzC;MACA;MACA;MACA;IACJ,CAAC,CAAC;IACFC,SAAS,EAAEV,OAAO,CAACW,QAAQ,CAAC;MACxBT,KAAK,EAAEU,SAAS,KAAK;QACjBC,GAAG,EAAE,OAAO;QACZC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACV,CAAC,CAAC;MACFI,eAAe,EAAE,CACb;QAAER,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAE;MAAO,CAAC;IAEpC,CAAC,CAAC;IACFQ,WAAW,EAAEjB,OAAO,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEgB,WAAW,KAAK;QACnBL,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UACF,GAAGG,WAAW;UACdC,QAAQ,EAAEC,MAAM,CAACF,WAAW,CAACC,QAAQ,CAAC,GAAG;QAC7C;MACJ,CAAC,CAAC;MACFH,eAAe,EAAEA,CAACK,MAAM,EAAEC,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEf,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAEc,GAAG,CAACd;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFe,WAAW,EAAExB,OAAO,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEgB,WAAW,KAAK;QACnBL,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UACF,GAAGG,WAAW;UACdC,QAAQ,EAAEC,MAAM,CAACF,WAAW,CAACC,QAAQ,CAAC,GAAG;QAC7C;MACJ,CAAC,CAAC;MACFH,eAAe,EAAEA,CAACK,MAAM,EAAEC,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEf,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAEc,GAAG,CAACd;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFgB,cAAc,EAAEzB,OAAO,CAACW,QAAQ,CAAC;MAC7BT,KAAK,EAAEA,CAAC;QAAEO;MAAG,CAAC,MAAM;QAChBI,GAAG,EAAG,OAAM;QACZC,MAAM,EAAE,QAAQ;QAChBC,IAAI,EAAE;UAAEN;QAAG;MACf,CAAC,CAAC;MACFO,eAAe,EAAEA,CAACK,MAAM,EAAEC,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEf,IAAI,EAAE,MAAM;QAAEC,EAAE,EAAEc,GAAG,CAACd;MAAG,CAAC;IAEpC,CAAC,CAAC;IACFiB,WAAW,EAAE1B,OAAO,CAACW,QAAQ,CAAC;MAC1BT,KAAK,EAAEyB,YAAY,KAAK;QACpBd,GAAG,EAAE,WAAW;QAChBC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEY;MACV,CAAC;MACD;MACA;MACA;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTC,eAAe;EACfC,oBAAoB;EACpBC,yBAAyB;EACzBC,sBAAsB;EACtBC,sBAAsB;EACtBC;AACJ,CAAC,GAAGpC,YAAY;;AAEhB;AACA,OAAO,MAAMqC,gBAAgB,GAAGC,gBAAgB,CAACpC,SAAS,CAACqC,QAAQ,CAACC,MAAM,CAAC,CAAC;;AAE5E;AACA,MAAMC,eAAe,GAAGhD,cAAc,CAClCiD,iBAAiB,EACjBC,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGC,YAAY,CAACC,YAAY,CAACC,KAAK;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAIb,eAAe,CAACY,KAAK,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAIxD,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}