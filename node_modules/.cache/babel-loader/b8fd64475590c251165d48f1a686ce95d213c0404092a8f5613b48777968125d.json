{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst shopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.date.localeCompare(a.date)\n});\nconst initialState = shopsAdapter.getInitialState();\nexport const api = createApi({\n  reducerPath: 'api',\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'http://localhost:3000/api'\n  }),\n  tagTypes: ['Shops'],\n  endpoints: builder => ({\n    getShops: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        const loadedShops = responseData.map(shop => {\n          // console.log(shop.name);\n          return shop.name;\n        });\n        return shopsAdapter.setAll(initialState, loadedShops);\n      },\n      // providesTags: ['Shops'],\n      providesTags: (result, error, arg) => [{\n        type: 'Shops',\n        id: \"LIST\"\n      }, ...result.ids.map(({\n        id\n      }) => ({\n        type: 'Skills',\n        id\n      }))]\n    })\n    // addNewSkill: builder.mutation({\n    //     query: (newSkill) => ({\n    //         url: '/skills',\n    //         method: 'POST',\n    //         body: newSkill\n    //     }),\n    //     // invalidatesTags: [\n    //     //     { type: 'Skills'}\n    //     // ]\n    //     invalidatesTags: ['Skills'],\n    // }),\n    // deleteSkill: builder.mutation({\n    //    query: ({id}) => ({\n    //         url: '/skills',\n    //         method: 'DELETE',\n    //         body: {id}\n    //     }),\n    //     // invalidatesTags: (result, error, arg) => [\n    //     //     { type: 'Skills', id: arg.id }\n    //     // ]\n    //     invalidatesTags: ['Skills'],\n    // })\n  })\n});\nexport const {\n  useGetShopsQuery\n  // useAddNewSkillMutation,\n  // useDeleteSkillMutation\n} = api;","map":{"version":3,"names":["createSelector","createEntityAdapter","createApi","fetchBaseQuery","shopsAdapter","sortComparer","a","b","date","localeCompare","initialState","getInitialState","api","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getShops","query","transformResponse","responseData","loadedShops","map","shop","name","setAll","providesTags","result","error","arg","type","id","ids","useGetShopsQuery"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/api.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\n\nconst shopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.date.localeCompare(a.date)\n})\n\nconst initialState = shopsAdapter.getInitialState()\n\n\nexport const api = createApi({\n    reducerPath: 'api',\n    baseQuery: fetchBaseQuery({baseUrl: 'http://localhost:3000/api'}),\n    tagTypes: ['Shops'],\n    endpoints: builder => ({\n        getShops: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                const loadedShops = responseData.map(shop => {\n                    // console.log(shop.name);\n                    return shop.name;\n                });\n                return shopsAdapter.setAll(initialState, loadedShops)\n            },\n            // providesTags: ['Shops'],\n            providesTags: (result, error, arg) => [\n                {type: 'Shops', id: \"LIST\"},\n                ...result.ids.map(({ id }) => ({ type: 'Skills', id }))\n            ]\n        }),\n        // addNewSkill: builder.mutation({\n        //     query: (newSkill) => ({\n        //         url: '/skills',\n        //         method: 'POST',\n        //         body: newSkill\n        //     }),\n        //     // invalidatesTags: [\n        //     //     { type: 'Skills'}\n        //     // ]\n        //     invalidatesTags: ['Skills'],\n        // }),\n        // deleteSkill: builder.mutation({\n        //    query: ({id}) => ({\n        //         url: '/skills',\n        //         method: 'DELETE',\n        //         body: {id}\n        //     }),\n        //     // invalidatesTags: (result, error, arg) => [\n        //     //     { type: 'Skills', id: arg.id }\n        //     // ]\n        //     invalidatesTags: ['Skills'],\n        // })\n    })\n})\nexport const {\n    useGetShopsQuery,\n    // useAddNewSkillMutation,\n    // useDeleteSkillMutation\n} = api\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAASC,SAAS,EAAEC,cAAc,QAAQ,8BAA8B;AAExE,MAAMC,YAAY,GAAGH,mBAAmB,CAAC;EACrCI,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,IAAI,CAACC,aAAa,CAACH,CAAC,CAACE,IAAI;AACvD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,YAAY,CAACO,eAAe,CAAC,CAAC;AAGnD,OAAO,MAAMC,GAAG,GAAGV,SAAS,CAAC;EACzBW,WAAW,EAAE,KAAK;EAClBC,SAAS,EAAEX,cAAc,CAAC;IAACY,OAAO,EAAE;EAA2B,CAAC,CAAC;EACjEC,QAAQ,EAAE,CAAC,OAAO,CAAC;EACnBC,SAAS,EAAEC,OAAO,KAAK;IACnBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,MAAMC,WAAW,GAAGD,YAAY,CAACE,GAAG,CAACC,IAAI,IAAI;UACzC;UACA,OAAOA,IAAI,CAACC,IAAI;QACpB,CAAC,CAAC;QACF,OAAOtB,YAAY,CAACuB,MAAM,CAACjB,YAAY,EAAEa,WAAW,CAAC;MACzD,CAAC;MACD;MACAK,YAAY,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEC,GAAG,KAAK,CAClC;QAACC,IAAI,EAAE,OAAO;QAAEC,EAAE,EAAE;MAAM,CAAC,EAC3B,GAAGJ,MAAM,CAACK,GAAG,CAACV,GAAG,CAAC,CAAC;QAAES;MAAG,CAAC,MAAM;QAAED,IAAI,EAAE,QAAQ;QAAEC;MAAG,CAAC,CAAC,CAAC;IAE/D,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTE;EACA;EACA;AACJ,CAAC,GAAGvB,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}