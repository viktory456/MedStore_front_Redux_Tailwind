{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from '../api/api';\nconst drugsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.id.localeCompare(a.id)\n});\nconst initialState = drugsAdapter.getInitialState();\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugs: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        return drugsAdapter.setAll(initialState, responseData.drugs);\n      },\n      providesTags: {\n        type: 'Drug',\n        id: \"LIST\"\n      }\n    }),\n    addFavorite: builder.mutation({\n      query: ({\n        drugId,\n        favorite\n      }) => ({\n        url: `/${drugId}`,\n        method: 'PUT',\n        body: {\n          ...initialItem,\n          favorite: favorite\n        }\n      }),\n      invalidatesTags: (result, error, arg) => [{\n        type: 'Drug',\n        favorite: arg.favorite\n      }]\n    })\n    // addFavorite: builder.mutation({\n    //     query: ({ initialItem, favorite}) => ({\n    //         url: `/favorite`,\n    //         method: 'PATCH',\n    //         body: { favorite }\n    //     }),\n    //     async onQueryStarted({ initialItem, favorite}, { dispatch, queryFulfilled }) {\n    //         const patchResult = dispatch(\n    //             drugsApiSlice.util.updateQueryData('getDrugs', 'getDrugs', draft => {\n    //                 const drug = draft.entities[initialItem.id]\n    //                 if (drug) initialItem.favorite = favorite\n    //             })\n    //         )\n    //         try {\n    //             await queryFulfilled\n    //         } catch {\n    //             patchResult.undo()\n    //         }\n    //     }\n    // })\n  })\n});\nexport const {\n  useGetDrugsQuery\n  // useToggleFavoriteMutation,\n} = drugsApiSlice;\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","drugsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsApiSlice","injectEndpoints","endpoints","builder","getDrugs","query","transformResponse","responseData","setAll","drugs","providesTags","type","addFavorite","mutation","drugId","favorite","url","method","body","initialItem","invalidatesTags","result","error","arg","useGetDrugsQuery"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from '../api/api'\n\nconst drugsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.id.localeCompare(a.id)\n})\n\nconst initialState = drugsAdapter.getInitialState()\n\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugs: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                return drugsAdapter.setAll(initialState, responseData.drugs)\n            },\n            providesTags: { type: 'Drug', id: \"LIST\" },\n        }),\n        addFavorite: builder.mutation({\n            query: ({drugId, favorite}) => ({\n                url: `/${drugId}`,\n                method: 'PUT',\n                body: {\n                    ...initialItem,\n                    favorite: favorite\n                }\n            }),\n            invalidatesTags: (result, error, arg) => [\n                { type: 'Drug', favorite: arg.favorite }\n            ]\n        }),\n        // addFavorite: builder.mutation({\n        //     query: ({ initialItem, favorite}) => ({\n        //         url: `/favorite`,\n        //         method: 'PATCH',\n        //         body: { favorite }\n        //     }),\n        //     async onQueryStarted({ initialItem, favorite}, { dispatch, queryFulfilled }) {\n        //         const patchResult = dispatch(\n        //             drugsApiSlice.util.updateQueryData('getDrugs', 'getDrugs', draft => {\n        //                 const drug = draft.entities[initialItem.id]\n        //                 if (drug) initialItem.favorite = favorite\n        //             })\n        //         )\n        //         try {\n        //             await queryFulfilled\n        //         } catch {\n        //             patchResult.undo()\n        //         }\n        //     }\n        // })\n    })\n})\nexport const {\n    useGetDrugsQuery,\n    // useToggleFavoriteMutation,\n\n} = drugsApiSlice\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,YAAY;AAEnC,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACrCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,EAAE,CAACC,aAAa,CAACH,CAAC,CAACE,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,YAAY,CAACO,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGT,QAAQ,CAACU,eAAe,CAAC;EAC/CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOf,YAAY,CAACgB,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,KAAK,CAAC;MAChE,CAAC;MACDC,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEf,EAAE,EAAE;MAAO;IAC7C,CAAC,CAAC;IACFgB,WAAW,EAAET,OAAO,CAACU,QAAQ,CAAC;MAC1BR,KAAK,EAAEA,CAAC;QAACS,MAAM;QAAEC;MAAQ,CAAC,MAAM;QAC5BC,GAAG,EAAG,IAAGF,MAAO,EAAC;QACjBG,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UACF,GAAGC,WAAW;UACdJ,QAAQ,EAAEA;QACd;MACJ,CAAC,CAAC;MACFK,eAAe,EAAEA,CAACC,MAAM,EAAEC,KAAK,EAAEC,GAAG,KAAK,CACrC;QAAEZ,IAAI,EAAE,MAAM;QAAEI,QAAQ,EAAEQ,GAAG,CAACR;MAAS,CAAC;IAEhD,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACJ,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTS;EACA;AAEJ,CAAC,GAAGxB,aAAa;;AAEjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}