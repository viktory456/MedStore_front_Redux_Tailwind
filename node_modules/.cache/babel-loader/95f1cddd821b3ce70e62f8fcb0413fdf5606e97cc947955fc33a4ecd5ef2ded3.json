{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nimport { useParams } from 'react-router-dom';\nconst drugsToShopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.id.localeCompare(a.id)\n});\nconst initialState = drugsToShopsAdapter.getInitialState();\nexport const drugsToShopsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugsShops: builder.query({\n      query: () => '/',\n      //to use SelectId???\n      transformResponse: responseData => {\n        // let drugsToShop = responseData.filter(drug => drug.shopId === id);\n        // console.log(drugsToShop);\n        // console.log(responseData);\n        return drugsToShopsAdapter.setAll(initialState, responseData.drugsShops);\n      },\n      providesTags: {\n        type: 'DrugsToShops',\n        id: \"LIST\"\n      }\n      // providesTags: (result, error, arg) => [\n      //     ...result.ids.map(id => ({ type: 'DrugsToShops', id }))\n      // ]\n    })\n  })\n});\nexport const {\n  useGetDrugsShopsQuery\n} = drugsToShopsApiSlice;\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","useParams","drugsToShopsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsToShopsApiSlice","injectEndpoints","endpoints","builder","getDrugsShops","query","transformResponse","responseData","setAll","drugsShops","providesTags","type","useGetDrugsShopsQuery"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsToShopsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\nimport { useParams } from 'react-router-dom'\n\nconst drugsToShopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.id.localeCompare(a.id)\n})\n\nconst initialState = drugsToShopsAdapter.getInitialState()\n\nexport const drugsToShopsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugsShops: builder.query({\n            query: () => '/', //to use SelectId???\n            transformResponse: responseData => {\n                // let drugsToShop = responseData.filter(drug => drug.shopId === id);\n                // console.log(drugsToShop);\n                // console.log(responseData);\n                return drugsToShopsAdapter.setAll(initialState, responseData.drugsShops)\n            },\n            providesTags: { type: 'DrugsToShops', id: \"LIST\" },\n            // providesTags: (result, error, arg) => [\n            //     ...result.ids.map(id => ({ type: 'DrugsToShops', id }))\n            // ]\n        }),\n    })\n})\nexport const {\n    useGetDrugsShopsQuery,\n} = drugsToShopsApiSlice\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,mBAAmB,GAAGH,mBAAmB,CAAC;EAC5CI,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,EAAE,CAACC,aAAa,CAACH,CAAC,CAACE,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,mBAAmB,CAACO,eAAe,CAAC,CAAC;AAE1D,OAAO,MAAMC,oBAAoB,GAAGV,QAAQ,CAACW,eAAe,CAAC;EACtDC,SAAS,EAAEC,OAAO,KAAK;IACtBC,aAAa,EAAED,OAAO,CAACE,KAAK,CAAC;MACzBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAAE;MAClBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B;QACA;QACA;QACA,OAAOf,mBAAmB,CAACgB,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,UAAU,CAAC;MAC5E,CAAC;MACDC,YAAY,EAAE;QAAEC,IAAI,EAAE,cAAc;QAAEf,EAAE,EAAE;MAAO;MACjD;MACA;MACA;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTgB;AACJ,CAAC,GAAGZ,oBAAoB;;AAExB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}