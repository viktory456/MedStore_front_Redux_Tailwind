{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nconst couponsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = couponsAdapter.getInitialState();\nexport const couponsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getCoupons: builder.query({\n      query: () => '/coupons',\n      transformResponse: responseData => {\n        return couponsAdapter.setAll(initialState, responseData);\n      },\n      providesTags: {\n        type: 'Coupons',\n        id: \"LIST\"\n      }\n    }),\n    copyCoupon: builder.mutation({\n      query: id => ({\n        url: `/favorite`,\n        method: 'PUT',\n        body: {\n          id\n        }\n      })\n    })\n  })\n});\nexport const {\n  useGetCouponsQuery\n} = couponsApiSlice;\n\n// returns the query result object\nexport const selectCouponsResult = couponsApiSlice.endpoints.getCoupons.select();\n\n// Creates memoized selector\nconst selectCouponsData = createSelector(selectCouponsResult, couponsResult => couponsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllCoupons,\n  selectById: selectCouponById,\n  selectIds: selectCouponIds\n  // Pass in a selector that returns the posts slice of state\n} = couponsAdapter.getSelectors(state => {\n  var _selectCouponsData;\n  return (_selectCouponsData = selectCouponsData(state)) !== null && _selectCouponsData !== void 0 ? _selectCouponsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","couponsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","couponsApiSlice","injectEndpoints","endpoints","builder","getCoupons","query","transformResponse","responseData","setAll","providesTags","type","copyCoupon","mutation","url","method","body","useGetCouponsQuery","selectCouponsResult","select","selectCouponsData","couponsResult","data","selectAll","selectAllCoupons","selectById","selectCouponById","selectIds","selectCouponIds","getSelectors","state","_selectCouponsData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/couponsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\"\nimport {apiSlice} from './api'\n\nconst couponsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.id.localeCompare(b.id)\n})\n\nconst initialState = couponsAdapter.getInitialState()\n\nexport const couponsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getCoupons: builder.query({\n            query: () => '/coupons',\n            transformResponse: responseData => {\n                return couponsAdapter.setAll(initialState, responseData)\n            },\n            providesTags: { type: 'Coupons', id: \"LIST\" },\n        }),\n        copyCoupon: builder.mutation({\n            query: (id) => ({\n                url: `/favorite`,\n                method: 'PUT',\n                body: {id}\n            }),\n    })\n})\n})\nexport const {\n    useGetCouponsQuery,\n} = couponsApiSlice\n\n// returns the query result object\nexport const selectCouponsResult = couponsApiSlice.endpoints.getCoupons.select()\n\n// Creates memoized selector\nconst selectCouponsData = createSelector(\n    selectCouponsResult,\n    couponsResult => couponsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllCoupons,\n    selectById: selectCouponById,\n    selectIds: selectCouponIds\n    // Pass in a selector that returns the posts slice of state\n} = couponsAdapter.getSelectors(state => selectCouponsData(state) ?? initialState)\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAE9B,MAAMC,cAAc,GAAGF,mBAAmB,CAAC;EACvCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,cAAc,CAACO,eAAe,CAAC,CAAC;AAErD,OAAO,MAAMC,eAAe,GAAGT,QAAQ,CAACU,eAAe,CAAC;EACjDC,SAAS,EAAEC,OAAO,KAAK;IACtBC,UAAU,EAAED,OAAO,CAACE,KAAK,CAAC;MACtBA,KAAK,EAAEA,CAAA,KAAM,UAAU;MACvBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOf,cAAc,CAACgB,MAAM,CAACV,YAAY,EAAES,YAAY,CAAC;MAC5D,CAAC;MACDE,YAAY,EAAE;QAAEC,IAAI,EAAE,SAAS;QAAEd,EAAE,EAAE;MAAO;IAChD,CAAC,CAAC;IACFe,UAAU,EAAER,OAAO,CAACS,QAAQ,CAAC;MACzBP,KAAK,EAAGT,EAAE,KAAM;QACZiB,GAAG,EAAG,WAAU;QAChBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UAACnB;QAAE;MACb,CAAC;IACT,CAAC;EACL,CAAC;AACD,CAAC,CAAC;AACF,OAAO,MAAM;EACToB;AACJ,CAAC,GAAGhB,eAAe;;AAEnB;AACA,OAAO,MAAMiB,mBAAmB,GAAGjB,eAAe,CAACE,SAAS,CAACE,UAAU,CAACc,MAAM,CAAC,CAAC;;AAEhF;AACA,MAAMC,iBAAiB,GAAG9B,cAAc,CACpC4B,mBAAmB,EACnBG,aAAa,IAAIA,aAAa,CAACC,IAAI,CAAC;AACxC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,gBAAgB;EAC3BC,UAAU,EAAEC,gBAAgB;EAC5BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGnC,cAAc,CAACoC,YAAY,CAACC,KAAK;EAAA,IAAAC,kBAAA;EAAA,QAAAA,kBAAA,GAAIX,iBAAiB,CAACU,KAAK,CAAC,cAAAC,kBAAA,cAAAA,kBAAA,GAAIhC,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}