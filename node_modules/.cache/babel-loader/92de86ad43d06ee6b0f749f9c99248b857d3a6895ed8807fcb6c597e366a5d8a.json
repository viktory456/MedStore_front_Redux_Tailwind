{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from '../api/api';\nconst drugsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => b.id.localeCompare(a.id)\n});\nconst initialState = drugsAdapter.getInitialState();\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugs: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        return drugsAdapter.setAll(initialState, responseData.drugs);\n      },\n      providesTags: {\n        type: 'Drug',\n        id: \"LIST\"\n      }\n    }),\n    // toggleFavorite: builder.mutation({\n    //     query: ({initialItem, favorite}) => ({\n    //         url: '/favorite',\n    //         method: 'PUT',\n    //         body: {\n    //             ...initialItem,\n    //             favorite: favorite\n    //         }\n    //     }),\n    //     invalidatesTags: (result, error, arg) => [\n    //         { type: 'Drug', favorite: arg.favorite }\n    //     ]\n    // }),\n    addFavorite: builder.mutation({\n      query: ({\n        initialItem,\n        favorite\n      }) => ({\n        url: `/favorite`,\n        method: 'PATCH',\n        body: {\n          favorite\n        }\n      }),\n      async onQueryStarted({\n        postId,\n        reactions\n      }, {\n        dispatch,\n        queryFulfilled\n      }) {\n        // `updateQueryData` requires the endpoint name and cache key arguments,\n        // so it knows which piece of cache state to update\n        const patchResult = dispatch(\n        // updateQueryData takes three arguments: the name of the endpoint to update, the same cache key value used to identify the specific cached data, and a callback that updates the cached data.\n        extendedApiSlice.util.updateQueryData('getPosts', 'getPosts', draft => {\n          // The `draft` is Immer-wrapped and can be \"mutated\" like in createSlice\n          const post = draft.entities[postId];\n          if (post) post.reactions = reactions;\n        }));\n        try {\n          await queryFulfilled;\n        } catch {\n          patchResult.undo();\n        }\n      }\n    })\n  })\n});\nexport const {\n  useGetDrugsQuery,\n  useToggleFavoriteMutation\n} = drugsApiSlice;\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","drugsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsApiSlice","injectEndpoints","endpoints","builder","getDrugs","query","transformResponse","responseData","setAll","drugs","providesTags","type","addFavorite","mutation","initialItem","favorite","url","method","body","onQueryStarted","postId","reactions","dispatch","queryFulfilled","patchResult","extendedApiSlice","util","updateQueryData","draft","post","entities","undo","useGetDrugsQuery","useToggleFavoriteMutation"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from '../api/api'\n\nconst drugsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => b.id.localeCompare(a.id)\n})\n\nconst initialState = drugsAdapter.getInitialState()\n\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugs: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                return drugsAdapter.setAll(initialState, responseData.drugs)\n            },\n            providesTags: { type: 'Drug', id: \"LIST\" },\n        }),\n        // toggleFavorite: builder.mutation({\n        //     query: ({initialItem, favorite}) => ({\n        //         url: '/favorite',\n        //         method: 'PUT',\n        //         body: {\n        //             ...initialItem,\n        //             favorite: favorite\n        //         }\n        //     }),\n        //     invalidatesTags: (result, error, arg) => [\n        //         { type: 'Drug', favorite: arg.favorite }\n        //     ]\n        // }),\n        addFavorite: builder.mutation({\n            query: ({ initialItem, favorite}) => ({\n                url: `/favorite`,\n                method: 'PATCH',\n                body: { favorite }\n            }),\n            async onQueryStarted({ postId, reactions }, { dispatch, queryFulfilled }) {\n                // `updateQueryData` requires the endpoint name and cache key arguments,\n                // so it knows which piece of cache state to update\n                const patchResult = dispatch(\n                    // updateQueryData takes three arguments: the name of the endpoint to update, the same cache key value used to identify the specific cached data, and a callback that updates the cached data.\n                    extendedApiSlice.util.updateQueryData('getPosts', 'getPosts', draft => {\n                        // The `draft` is Immer-wrapped and can be \"mutated\" like in createSlice\n                        const post = draft.entities[postId]\n                        if (post) post.reactions = reactions\n                    })\n                )\n                try {\n                    await queryFulfilled\n                } catch {\n                    patchResult.undo()\n                }\n            }\n        })\n    })\n})\nexport const {\n    useGetDrugsQuery,\n    useToggleFavoriteMutation\n} = drugsApiSlice\n\n// export const selectShopsResult = shopsApiSlice.endpoints.getShops.select()\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,YAAY;AAEnC,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACrCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,EAAE,CAACC,aAAa,CAACH,CAAC,CAACE,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,YAAY,CAACO,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGT,QAAQ,CAACU,eAAe,CAAC;EAC/CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOf,YAAY,CAACgB,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,KAAK,CAAC;MAChE,CAAC;MACDC,YAAY,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEf,EAAE,EAAE;MAAO;IAC7C,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAgB,WAAW,EAAET,OAAO,CAACU,QAAQ,CAAC;MAC1BR,KAAK,EAAEA,CAAC;QAAES,WAAW;QAAEC;MAAQ,CAAC,MAAM;QAClCC,GAAG,EAAG,WAAU;QAChBC,MAAM,EAAE,OAAO;QACfC,IAAI,EAAE;UAAEH;QAAS;MACrB,CAAC,CAAC;MACF,MAAMI,cAAcA,CAAC;QAAEC,MAAM;QAAEC;MAAU,CAAC,EAAE;QAAEC,QAAQ;QAAEC;MAAe,CAAC,EAAE;QACtE;QACA;QACA,MAAMC,WAAW,GAAGF,QAAQ;QACxB;QACAG,gBAAgB,CAACC,IAAI,CAACC,eAAe,CAAC,UAAU,EAAE,UAAU,EAAEC,KAAK,IAAI;UACnE;UACA,MAAMC,IAAI,GAAGD,KAAK,CAACE,QAAQ,CAACV,MAAM,CAAC;UACnC,IAAIS,IAAI,EAAEA,IAAI,CAACR,SAAS,GAAGA,SAAS;QACxC,CAAC,CACL,CAAC;QACD,IAAI;UACA,MAAME,cAAc;QACxB,CAAC,CAAC,MAAM;UACJC,WAAW,CAACO,IAAI,CAAC,CAAC;QACtB;MACJ;IACJ,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTC,gBAAgB;EAChBC;AACJ,CAAC,GAAGjC,aAAa;;AAEjB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}