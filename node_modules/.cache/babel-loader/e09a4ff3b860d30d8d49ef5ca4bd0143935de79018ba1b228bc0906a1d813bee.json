{"ast":null,"code":"var _jsxFileName = \"/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/shops/ShoppingCart.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useGetCartQuery } from '../api/cartSlice';\nimport CartItem from '../cart/CartItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShoppingCart = () => {\n  _s();\n  const {\n    data: cart,\n    isLoading,\n    isSuccess,\n    isError,\n    error\n  } = useGetCartQuery('getCart');\n  let contentCart;\n  if (isLoading) {\n    contentCart = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\\"Loading...\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 19\n    }, this);\n  } else if (isSuccess) {\n    contentCart = cart.ids.map(cartItemId => /*#__PURE__*/_jsxDEV(CartItem, {\n      cartItemId: cartItemId\n    }, cartItemId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 45\n    }, this));\n  }\n  let total = 0;\n  for (let i = 0; i < cart.ids.length; i++) {\n    total = total + cart.entities[cart.ids[i]].price * cart.entities[cart.ids[i]].quantity;\n  }\n  // cart.ids.map(\n  //   cartItemId => {\n  //     const { itemInCart } = useGetCartQuery('getCart', {\n  //       selectFromResult: ({ data }) => ({\n  //         itemInCart: data?.entities[cartItemId]\n  //       }),\n  //     })\n  //     total = total + itemInCart.price * itemInCart.quantity\n  //   }\n  // )\n\n  // console.log(totalCart);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: contentCart\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Total:\", total]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ShoppingCart, \"5ko3K+1uEjBNs+n3/TWnTd2u0SQ=\", false, function () {\n  return [useGetCartQuery];\n});\n_c = ShoppingCart;\nexport default ShoppingCart;\nvar _c;\n$RefreshReg$(_c, \"ShoppingCart\");","map":{"version":3,"names":["React","useGetCartQuery","CartItem","jsxDEV","_jsxDEV","Fragment","_Fragment","ShoppingCart","_s","data","cart","isLoading","isSuccess","isError","error","contentCart","children","fileName","_jsxFileName","lineNumber","columnNumber","ids","map","cartItemId","total","i","length","entities","price","quantity","_c","$RefreshReg$"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/shops/ShoppingCart.js"],"sourcesContent":["import React from 'react'\nimport { useGetCartQuery } from '../api/cartSlice'\nimport CartItem from '../cart/CartItem'\n\nconst ShoppingCart = () => {\n\n  const { data:cart, isLoading, isSuccess, isError, error } = useGetCartQuery('getCart')\n\n  let contentCart;\n  if (isLoading) {\n    contentCart = <p>\"Loading...\"</p>;\n  } else if (isSuccess) {\n    contentCart = cart.ids.map(cartItemId=> <CartItem key={cartItemId} cartItemId={cartItemId}/>)\n  }\n  let total = 0; \n  for(let i=0; i<cart.ids.length; i++){\n    total = total + cart.entities[cart.ids[i]].price * cart.entities[cart.ids[i]].quantity\n  }\n  // cart.ids.map(\n  //   cartItemId => {\n  //     const { itemInCart } = useGetCartQuery('getCart', {\n  //       selectFromResult: ({ data }) => ({\n  //         itemInCart: data?.entities[cartItemId]\n  //       }),\n  //     })\n  //     total = total + itemInCart.price * itemInCart.quantity\n  //   }\n  // )\n\n  // console.log(totalCart);\n\n  return (\n    <>\n      <div>{contentCart}</div>\n      <div>Total:{total}</div>\n    </>\n\n  )\n}\n\nexport default ShoppingCart"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,QAAQ,MAAM,kBAAkB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEzB,MAAM;IAAEC,IAAI,EAACC,IAAI;IAAEC,SAAS;IAAEC,SAAS;IAAEC,OAAO;IAAEC;EAAM,CAAC,GAAGb,eAAe,CAAC,SAAS,CAAC;EAEtF,IAAIc,WAAW;EACf,IAAIJ,SAAS,EAAE;IACbI,WAAW,gBAAGX,OAAA;MAAAY,QAAA,EAAG;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EACnC,CAAC,MAAM,IAAIR,SAAS,EAAE;IACpBG,WAAW,GAAGL,IAAI,CAACW,GAAG,CAACC,GAAG,CAACC,UAAU,iBAAGnB,OAAA,CAACF,QAAQ;MAAkBqB,UAAU,EAAEA;IAAW,GAAnCA,UAAU;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA0B,CAAC,CAAC;EAC/F;EACA,IAAII,KAAK,GAAG,CAAC;EACb,KAAI,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACf,IAAI,CAACW,GAAG,CAACK,MAAM,EAAED,CAAC,EAAE,EAAC;IAClCD,KAAK,GAAGA,KAAK,GAAGd,IAAI,CAACiB,QAAQ,CAACjB,IAAI,CAACW,GAAG,CAACI,CAAC,CAAC,CAAC,CAACG,KAAK,GAAGlB,IAAI,CAACiB,QAAQ,CAACjB,IAAI,CAACW,GAAG,CAACI,CAAC,CAAC,CAAC,CAACI,QAAQ;EACxF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,oBACEzB,OAAA,CAAAE,SAAA;IAAAU,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAMD;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACxBhB,OAAA;MAAAY,QAAA,GAAK,QAAM,EAACQ,KAAK;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA,eACxB,CAAC;AAGP,CAAC;AAAAZ,EAAA,CAlCKD,YAAY;EAAA,QAE4CN,eAAe;AAAA;AAAA6B,EAAA,GAFvEvB,YAAY;AAoClB,eAAeA,YAAY;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}