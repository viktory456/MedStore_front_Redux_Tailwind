{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from './api';\nimport { useParams } from 'react-router-dom';\nconst medsShopsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = medsShopsAdapter.getInitialState();\nexport const medsShopsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getMedsShops: builder.query({\n      query: () => `/`,\n      //to use SelectId???\n      transformResponse: (responseData, meta, arg) => {\n        // const medsToShop = responseData.medsShops.filter(item => Number(item.shopId == Number(arg)))\n        // return medsShopsAdapter.setAll(initialState, medsToShop)\n        return medsShopsAdapter.setAll(initialState, responseData.medsShops);\n      },\n      providesTags: {\n        type: 'MedsShops',\n        id: \"LIST\"\n      }\n      // providesTags: (result, error, arg) => [\n      //     ...result.ids.map(id => ({ type: 'MedsToShops', id }))\n      // ]\n    })\n  })\n});\nexport const {\n  useGetMedsShopsQuery\n} = medsShopsApiSlice;\n\n// returns the query result object\nexport const selectDtSResult = medsShopsApiSlice.endpoints.getMedsShops.select();\n\n// Creates memoized selector\nconst selectDtSData = createSelector(selectDtSResult, DtSResult => DtSResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllDtS,\n  selectById: selectDtSById,\n  selectIds: selectDtSIds\n  // Pass in a selector that returns the posts slice of state\n} = medsShopsAdapter.getSelectors(state => {\n  var _selectDtSData;\n  return (_selectDtSData = selectDtSData(state)) !== null && _selectDtSData !== void 0 ? _selectDtSData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","useParams","medsShopsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","medsShopsApiSlice","injectEndpoints","endpoints","builder","getMedsShops","query","transformResponse","responseData","meta","arg","setAll","medsShops","providesTags","type","useGetMedsShopsQuery","selectDtSResult","select","selectDtSData","DtSResult","data","selectAll","selectAllDtS","selectById","selectDtSById","selectIds","selectDtSIds","getSelectors","state","_selectDtSData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School RTK Query/medicine_delivery_app/src/features/api/medsToShopsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from './api'\nimport { useParams } from 'react-router-dom'\n\nconst medsShopsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.id.localeCompare(b.id)\n})\n\nconst initialState = medsShopsAdapter.getInitialState()\n\nexport const medsShopsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getMedsShops: builder.query({\n            query: () => `/`, //to use SelectId???\n            transformResponse: (responseData, meta, arg) => {\n                // const medsToShop = responseData.medsShops.filter(item => Number(item.shopId == Number(arg)))\n                // return medsShopsAdapter.setAll(initialState, medsToShop)\n                return medsShopsAdapter.setAll(initialState, responseData.medsShops)\n            },\n            providesTags: { type: 'MedsShops', id: \"LIST\" },\n            // providesTags: (result, error, arg) => [\n            //     ...result.ids.map(id => ({ type: 'MedsToShops', id }))\n            // ]\n    }),\n})\n})\nexport const {\n    useGetMedsShopsQuery\n} = medsShopsApiSlice\n\n// returns the query result object\nexport const selectDtSResult = medsShopsApiSlice.endpoints.getMedsShops.select()\n\n// Creates memoized selector\nconst selectDtSData = createSelector(\n    selectDtSResult,\n    DtSResult => DtSResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllDtS,\n    selectById: selectDtSById,\n    selectIds: selectDtSIds\n    // Pass in a selector that returns the posts slice of state\n} = medsShopsAdapter.getSelectors(state => selectDtSData(state) ?? initialState)"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,OAAO;AAC9B,SAASC,SAAS,QAAQ,kBAAkB;AAE5C,MAAMC,gBAAgB,GAAGH,mBAAmB,CAAC;EACzCI,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,gBAAgB,CAACO,eAAe,CAAC,CAAC;AAEvD,OAAO,MAAMC,iBAAiB,GAAGV,QAAQ,CAACW,eAAe,CAAC;EACnDC,SAAS,EAAEC,OAAO,KAAK;IACtBC,YAAY,EAAED,OAAO,CAACE,KAAK,CAAC;MACxBA,KAAK,EAAEA,CAAA,KAAO,GAAE;MAAE;MAClBC,iBAAiB,EAAEA,CAACC,YAAY,EAAEC,IAAI,EAAEC,GAAG,KAAK;QAC5C;QACA;QACA,OAAOjB,gBAAgB,CAACkB,MAAM,CAACZ,YAAY,EAAES,YAAY,CAACI,SAAS,CAAC;MACxE,CAAC;MACDC,YAAY,EAAE;QAAEC,IAAI,EAAE,WAAW;QAAEjB,EAAE,EAAE;MAAO;MAC9C;MACA;MACA;IACR,CAAC;EACL,CAAC;AACD,CAAC,CAAC;AACF,OAAO,MAAM;EACTkB;AACJ,CAAC,GAAGd,iBAAiB;;AAErB;AACA,OAAO,MAAMe,eAAe,GAAGf,iBAAiB,CAACE,SAAS,CAACE,YAAY,CAACY,MAAM,CAAC,CAAC;;AAEhF;AACA,MAAMC,aAAa,GAAG7B,cAAc,CAChC2B,eAAe,EACfG,SAAS,IAAIA,SAAS,CAACC,IAAI,CAAC;AAChC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,YAAY;EACvBC,UAAU,EAAEC,aAAa;EACzBC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGjC,gBAAgB,CAACkC,YAAY,CAACC,KAAK;EAAA,IAAAC,cAAA;EAAA,QAAAA,cAAA,GAAIX,aAAa,CAACU,KAAK,CAAC,cAAAC,cAAA,cAAAA,cAAA,GAAI9B,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}