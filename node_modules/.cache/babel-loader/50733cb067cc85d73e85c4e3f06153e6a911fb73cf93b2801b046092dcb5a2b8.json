{"ast":null,"code":"import { createSelector, createEntityAdapter } from \"@reduxjs/toolkit\";\nimport { apiSlice } from '../api/api';\nconst drugsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => a.id.localeCompare(b.id)\n});\nconst initialState = drugsAdapter.getInitialState();\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n  endpoints: builder => ({\n    getDrugs: builder.query({\n      query: () => '/',\n      transformResponse: responseData => {\n        return drugsAdapter.setAll(initialState, responseData.drugs);\n      },\n      // providesTags: (result, error, arg) => [\n      //     { type: 'Drug', id: \"LIST\" },\n      //     ...result.ids.map(id => ({ type: 'Drug', id }))\n      // ]\n      providesTags: ['Drug']\n    }),\n    //почитати про transformResponse, createEntityAdapter\n    addFavorite: builder.mutation({\n      query: ({\n        drugId,\n        newFav\n      }) => ({\n        url: `/favorite`,\n        method: 'PUT',\n        body: {\n          drugId,\n          newFav\n        }\n      }),\n      // invalidatesTags: (result, error, arg) => [\n      //     { type: 'Drug', id: arg.drugId  }\n      // ]\n      invalidatesTags: ['Drug'] //how to make rerender after qty change??\n    })\n  })\n});\nexport const {\n  useGetDrugsQuery,\n  useAddFavoriteMutation\n} = drugsApiSlice;\n\n// returns the query result object\nexport const selectDrugsResult = drugsApiSlice.endpoints.getDrugs.select();\n\n// Creates memoized selector\nconst selectDrugsData = createSelector(selectDrugsResult, drugsResult => drugsResult.data // normalized state object with ids & entities\n);\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n  selectAll: selectAllDrugs,\n  selectById: selectDrugById,\n  selectIds: selectDrugIds\n  // Pass in a selector that returns the posts slice of state\n} = drugsAdapter.getSelectors(state => {\n  var _selectDrugsData;\n  return (_selectDrugsData = selectDrugsData(state)) !== null && _selectDrugsData !== void 0 ? _selectDrugsData : initialState;\n});","map":{"version":3,"names":["createSelector","createEntityAdapter","apiSlice","drugsAdapter","sortComparer","a","b","id","localeCompare","initialState","getInitialState","drugsApiSlice","injectEndpoints","endpoints","builder","getDrugs","query","transformResponse","responseData","setAll","drugs","providesTags","addFavorite","mutation","drugId","newFav","url","method","body","invalidatesTags","useGetDrugsQuery","useAddFavoriteMutation","selectDrugsResult","select","selectDrugsData","drugsResult","data","selectAll","selectAllDrugs","selectById","selectDrugById","selectIds","selectDrugIds","getSelectors","state","_selectDrugsData"],"sources":["/Users/viktory456/Documents/WebDev/test tasks/ElifTech IT School/medicine_delivery_app/src/features/api/drugsSlice.js"],"sourcesContent":["import {createSelector, createEntityAdapter} from \"@reduxjs/toolkit\";\nimport {apiSlice} from '../api/api'\n\nconst drugsAdapter = createEntityAdapter({\n    sortComparer: (a, b) => a.id.localeCompare(b.id)\n})\n\nconst initialState = drugsAdapter.getInitialState()\n\nexport const drugsApiSlice = apiSlice.injectEndpoints({\n       endpoints: builder => ({\n        getDrugs: builder.query({\n            query: () => '/',\n            transformResponse: responseData => {\n                return drugsAdapter.setAll(initialState, responseData.drugs)\n            },\n            // providesTags: (result, error, arg) => [\n            //     { type: 'Drug', id: \"LIST\" },\n            //     ...result.ids.map(id => ({ type: 'Drug', id }))\n            // ]\n            providesTags:['Drug']\n        }),\n        //почитати про transformResponse, createEntityAdapter\n        addFavorite: builder.mutation({\n            query: ({drugId , newFav}) => ({\n                url: `/favorite`,\n                method: 'PUT',\n                body: {drugId, newFav}\n            }),\n            // invalidatesTags: (result, error, arg) => [\n            //     { type: 'Drug', id: arg.drugId  }\n            // ]\n            invalidatesTags: ['Drug']//how to make rerender after qty change??\n        }),\n\n    })\n})\nexport const {\n    useGetDrugsQuery,\n    useAddFavoriteMutation\n\n} = drugsApiSlice\n\n// returns the query result object\nexport const selectDrugsResult = drugsApiSlice.endpoints.getDrugs.select()\n\n// Creates memoized selector\nconst selectDrugsData = createSelector(\n    selectDrugsResult,\n    drugsResult => drugsResult.data // normalized state object with ids & entities\n)\n\n//getSelectors creates these selectors and we rename them with aliases using destructuring\nexport const {\n    selectAll: selectAllDrugs,\n    selectById: selectDrugById,\n    selectIds: selectDrugIds\n    // Pass in a selector that returns the posts slice of state\n} = drugsAdapter.getSelectors(state => selectDrugsData(state) ?? initialState)\n\n"],"mappings":"AAAA,SAAQA,cAAc,EAAEC,mBAAmB,QAAO,kBAAkB;AACpE,SAAQC,QAAQ,QAAO,YAAY;AAEnC,MAAMC,YAAY,GAAGF,mBAAmB,CAAC;EACrCG,YAAY,EAAEA,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,CAACC,aAAa,CAACF,CAAC,CAACC,EAAE;AACnD,CAAC,CAAC;AAEF,MAAME,YAAY,GAAGN,YAAY,CAACO,eAAe,CAAC,CAAC;AAEnD,OAAO,MAAMC,aAAa,GAAGT,QAAQ,CAACU,eAAe,CAAC;EAC/CC,SAAS,EAAEC,OAAO,KAAK;IACtBC,QAAQ,EAAED,OAAO,CAACE,KAAK,CAAC;MACpBA,KAAK,EAAEA,CAAA,KAAM,GAAG;MAChBC,iBAAiB,EAAEC,YAAY,IAAI;QAC/B,OAAOf,YAAY,CAACgB,MAAM,CAACV,YAAY,EAAES,YAAY,CAACE,KAAK,CAAC;MAChE,CAAC;MACD;MACA;MACA;MACA;MACAC,YAAY,EAAC,CAAC,MAAM;IACxB,CAAC,CAAC;IACF;IACAC,WAAW,EAAER,OAAO,CAACS,QAAQ,CAAC;MAC1BP,KAAK,EAAEA,CAAC;QAACQ,MAAM;QAAGC;MAAM,CAAC,MAAM;QAC3BC,GAAG,EAAG,WAAU;QAChBC,MAAM,EAAE,KAAK;QACbC,IAAI,EAAE;UAACJ,MAAM;UAAEC;QAAM;MACzB,CAAC,CAAC;MACF;MACA;MACA;MACAI,eAAe,EAAE,CAAC,MAAM,CAAC;IAC7B,CAAC;EAEL,CAAC;AACL,CAAC,CAAC;AACF,OAAO,MAAM;EACTC,gBAAgB;EAChBC;AAEJ,CAAC,GAAGpB,aAAa;;AAEjB;AACA,OAAO,MAAMqB,iBAAiB,GAAGrB,aAAa,CAACE,SAAS,CAACE,QAAQ,CAACkB,MAAM,CAAC,CAAC;;AAE1E;AACA,MAAMC,eAAe,GAAGlC,cAAc,CAClCgC,iBAAiB,EACjBG,WAAW,IAAIA,WAAW,CAACC,IAAI,CAAC;AACpC,CAAC;;AAED;AACA,OAAO,MAAM;EACTC,SAAS,EAAEC,cAAc;EACzBC,UAAU,EAAEC,cAAc;EAC1BC,SAAS,EAAEC;EACX;AACJ,CAAC,GAAGvC,YAAY,CAACwC,YAAY,CAACC,KAAK;EAAA,IAAAC,gBAAA;EAAA,QAAAA,gBAAA,GAAIX,eAAe,CAACU,KAAK,CAAC,cAAAC,gBAAA,cAAAA,gBAAA,GAAIpC,YAAY;AAAA,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}